{"ast":null,"code":"import _objectSpread from \"/Users/Alkane/Desktop/github/Assignment2/a2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport uuid from 'uuid/v1';\nimport { ADD_ITEM } from '../actions/AddItem';\nimport { DELETE_ITEM } from '../actions/DeleteItem';\nimport { EDIT_ITEM } from '../actions/EditItem';\nimport { CHECK_DETAILED_ITEM } from '../actions/CheckDetailedItem';\nimport { GET_ITEM_DETAIL } from '../actions/GetDetailItem';\nconst initState = {\n  items: [{\n    id: 1,\n    value: \"LET'S GO RAPTORS!!!\"\n  }, {\n    id: 2,\n    value: \"GSW SUCKS!!!\"\n  }]\n}; // previousState + action => newState\n\nconst messagesReducer = (state = initState, action) => {\n  switch (action.type) {\n    case ADD_ITEM:\n      {\n        const id = uuid();\n        const messageItem = {\n          id,\n          value: action.payload.value\n        };\n        return _objectSpread({}, state, {\n          items: [...state.items, messageItem]\n        });\n      }\n\n    case DELETE_ITEM:\n      {\n        const items = state.items.filter(({\n          id\n        }) => id !== action.payload.id);\n        return _objectSpread({}, state, {\n          items\n        });\n      }\n\n    case EDIT_ITEM:\n      {\n        const items = state.items.map(item => {\n          if (item.id === action.payload.editedItem.id) {\n            item.value = action.payload.editedItem.value;\n          }\n\n          return item;\n        });\n        return _objectSpread({}, state, {\n          items,\n          editingItem: {}\n        });\n      }\n\n    case CHECK_DETAILED_ITEM:\n      {\n        const item = state.items.find(({\n          id\n        }) => id === action.payload.id);\n        return _objectSpread({}, state, {\n          editingItem: item\n        });\n      }\n\n    case GET_ITEM_DETAIL:\n      {\n        const item = state.items.find(({\n          id\n        }) => id === action.payload.id);\n        console.log(item);\n        return;\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default messagesReducer;","map":{"version":3,"sources":["/Users/Alkane/Desktop/github/Assignment2/a2/src/reducers/Messages.js"],"names":["uuid","ADD_ITEM","DELETE_ITEM","EDIT_ITEM","CHECK_DETAILED_ITEM","GET_ITEM_DETAIL","initState","items","id","value","messagesReducer","state","action","type","messageItem","payload","filter","map","item","editedItem","editingItem","find","console","log"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,CACL;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,KAAK,EAAE;AAAf,GADK,EAEL;AAACD,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,KAAK,EAAE;AAAf,GAFK;AADS,CAAlB,C,CAOA;;AACA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGL,SAAT,EAAoBM,MAApB,KAA+B;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKZ,QAAL;AAAe;AACb,cAAMO,EAAE,GAAGR,IAAI,EAAf;AACA,cAAMc,WAAW,GAAG;AAClBN,UAAAA,EADkB;AAElBC,UAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,CAAeN;AAFJ,SAApB;AAIA,iCAAYE,KAAZ;AAAmBJ,UAAAA,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAV,EAAiBO,WAAjB;AAA1B;AACD;;AAED,SAAKZ,WAAL;AAAkB;AAChB,cAAMK,KAAK,GAAGI,KAAK,CAACJ,KAAN,CAAYS,MAAZ,CAAmB,CAAC;AAAER,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKI,MAAM,CAACG,OAAP,CAAeP,EAArD,CAAd;AACA,iCAAYG,KAAZ;AAAmBJ,UAAAA;AAAnB;AACD;;AAED,SAAKJ,SAAL;AAAgB;AACd,cAAMI,KAAK,GAAGI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgBC,IAAI,IAAI;AACpC,cAAIA,IAAI,CAACV,EAAL,KAAYI,MAAM,CAACG,OAAP,CAAeI,UAAf,CAA0BX,EAA1C,EAA8C;AAC5CU,YAAAA,IAAI,CAACT,KAAL,GAAaG,MAAM,CAACG,OAAP,CAAeI,UAAf,CAA0BV,KAAvC;AACD;;AAED,iBAAOS,IAAP;AACD,SANa,CAAd;AAQA,iCAAYP,KAAZ;AAAmBJ,UAAAA,KAAnB;AAA0Ba,UAAAA,WAAW,EAAE;AAAvC;AACD;;AAED,SAAKhB,mBAAL;AAA0B;AACxB,cAAMc,IAAI,GAAGP,KAAK,CAACJ,KAAN,CAAYc,IAAZ,CAAiB,CAAC;AAAEb,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKI,MAAM,CAACG,OAAP,CAAeP,EAAnD,CAAb;AACA,iCAAYG,KAAZ;AAAmBS,UAAAA,WAAW,EAAEF;AAAhC;AACD;;AAED,SAAKb,eAAL;AAAsB;AACpB,cAAMa,IAAI,GAAGP,KAAK,CAACJ,KAAN,CAAYc,IAAZ,CAAiB,CAAC;AAAEb,UAAAA;AAAF,SAAD,KAAYA,EAAE,KAAKI,MAAM,CAACG,OAAP,CAAeP,EAAnD,CAAb;AACAc,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA;AACD;;AAED;AAAS;AACP,eAAOP,KAAP;AACD;AAzCH;AA2CD,CA5CD;;AA8CA,eAAeD,eAAf","sourcesContent":["import uuid from 'uuid/v1';\nimport { ADD_ITEM } from '../actions/AddItem';\nimport { DELETE_ITEM } from '../actions/DeleteItem';\nimport { EDIT_ITEM } from '../actions/EditItem';\nimport { CHECK_DETAILED_ITEM } from '../actions/CheckDetailedItem';\nimport { GET_ITEM_DETAIL } from '../actions/GetDetailItem';\n\nconst initState = {\n  items: [\n    {id: 1, value: \"LET'S GO RAPTORS!!!\"},\n    {id: 2, value: \"GSW SUCKS!!!\"},  \n  ],\n};\n\n// previousState + action => newState\nconst messagesReducer = (state = initState, action) => {\n  switch (action.type) {\n    \n    case ADD_ITEM: {\n      const id = uuid();\n      const messageItem = {\n        id,\n        value: action.payload.value,\n      };\n      return { ...state, items: [...state.items, messageItem] };\n    }\n\n    case DELETE_ITEM: {\n      const items = state.items.filter(({ id }) => id !== action.payload.id);\n      return { ...state, items };\n    }\n\n    case EDIT_ITEM: {\n      const items = state.items.map(item => {\n        if (item.id === action.payload.editedItem.id) {\n          item.value = action.payload.editedItem.value;\n        }\n\n        return item;\n      });\n\n      return { ...state, items, editingItem: {} };\n    }\n\n    case CHECK_DETAILED_ITEM: {\n      const item = state.items.find(({ id }) => id === action.payload.id);\n      return { ...state, editingItem: item };\n    }\n\n    case GET_ITEM_DETAIL: {\n      const item = state.items.find(({ id }) => id === action.payload.id);\n      console.log(item);\n      return;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default messagesReducer;\n"]},"metadata":{},"sourceType":"module"}