{"ast":null,"code":"import _toConsumableArray from \"/Users/Alkane/github/Assignment2/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/Alkane/github/Assignment2/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport uuid from 'uuid/v1';\nimport { ADD_ITEM } from '../actions/AddItem';\nimport { DELETE_ITEM } from '../actions/DeleteItem';\nimport { EDIT_ITEM } from '../actions/EditItem';\nimport { CHECK_DETAILED_ITEM } from '../actions/CheckDetailedItem';\nvar initState = {\n  items: [{\n    id: '1',\n    value: \"LET'S GO RAPTORS!!!\"\n  }, {\n    id: '2',\n    value: \"GSW SUCKS!!!\"\n  }]\n}; // previousState + action => newState\n\nvar messagesReducer = function messagesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_ITEM:\n      {\n        var id = uuid();\n        var messageItem = {\n          id: id,\n          value: action.payload.value\n        };\n        return _objectSpread({}, state, {\n          items: [].concat(_toConsumableArray(state.items), [messageItem])\n        });\n      }\n\n    case DELETE_ITEM:\n      {\n        var items = state.items.filter(function (_ref) {\n          var id = _ref.id;\n          return id !== action.payload.id;\n        });\n        return _objectSpread({}, state, {\n          items: items\n        });\n      }\n\n    case EDIT_ITEM:\n      {\n        var _items = state.items.map(function (item) {\n          if (item.id === action.payload.editedItem.id) {\n            item.value = action.payload.editedItem.value;\n          }\n\n          return item;\n        });\n\n        return _objectSpread({}, state, {\n          items: _items,\n          editingItem: {}\n        });\n      }\n\n    case CHECK_DETAILED_ITEM:\n      {\n        var item = state.items.find(function (_ref2) {\n          var id = _ref2.id;\n          return id === action.payload.id;\n        });\n        return _objectSpread({}, state, {\n          editingItem: item\n        });\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nexport default messagesReducer;","map":{"version":3,"sources":["/Users/Alkane/github/Assignment2/src/reducers/Messages.js"],"names":["uuid","ADD_ITEM","DELETE_ITEM","EDIT_ITEM","CHECK_DETAILED_ITEM","initState","items","id","value","messagesReducer","state","action","type","messageItem","payload","filter","map","item","editedItem","editingItem","find"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,CACL;AAACC,IAAAA,EAAE,EAAE,GAAL;AAAUC,IAAAA,KAAK,EAAE;AAAjB,GADK,EAEL;AAACD,IAAAA,EAAE,EAAE,GAAL;AAAUC,IAAAA,KAAK,EAAE;AAAjB,GAFK;AADS,CAAlB,C,CAOA;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtBL,SAAsB;AAAA,MAAXM,MAAW;;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKX,QAAL;AAAe;AACb,YAAMM,EAAE,GAAGP,IAAI,EAAf;AACA,YAAMa,WAAW,GAAG;AAClBN,UAAAA,EAAE,EAAFA,EADkB;AAElBC,UAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,CAAeN;AAFJ,SAApB;AAIA,iCAAYE,KAAZ;AAAmBJ,UAAAA,KAAK,+BAAMI,KAAK,CAACJ,KAAZ,IAAmBO,WAAnB;AAAxB;AACD;;AAED,SAAKX,WAAL;AAAkB;AAChB,YAAMI,KAAK,GAAGI,KAAK,CAACJ,KAAN,CAAYS,MAAZ,CAAmB;AAAA,cAAGR,EAAH,QAAGA,EAAH;AAAA,iBAAYA,EAAE,KAAKI,MAAM,CAACG,OAAP,CAAeP,EAAlC;AAAA,SAAnB,CAAd;AACA,iCAAYG,KAAZ;AAAmBJ,UAAAA,KAAK,EAALA;AAAnB;AACD;;AAED,SAAKH,SAAL;AAAgB;AACd,YAAMG,MAAK,GAAGI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgB,UAAAC,IAAI,EAAI;AACpC,cAAIA,IAAI,CAACV,EAAL,KAAYI,MAAM,CAACG,OAAP,CAAeI,UAAf,CAA0BX,EAA1C,EAA8C;AAC5CU,YAAAA,IAAI,CAACT,KAAL,GAAaG,MAAM,CAACG,OAAP,CAAeI,UAAf,CAA0BV,KAAvC;AACD;;AAED,iBAAOS,IAAP;AACD,SANa,CAAd;;AAQA,iCAAYP,KAAZ;AAAmBJ,UAAAA,KAAK,EAALA,MAAnB;AAA0Ba,UAAAA,WAAW,EAAE;AAAvC;AACD;;AAED,SAAKf,mBAAL;AAA0B;AACxB,YAAMa,IAAI,GAAGP,KAAK,CAACJ,KAAN,CAAYc,IAAZ,CAAiB;AAAA,cAAGb,EAAH,SAAGA,EAAH;AAAA,iBAAYA,EAAE,KAAKI,MAAM,CAACG,OAAP,CAAeP,EAAlC;AAAA,SAAjB,CAAb;AACA,iCAAYG,KAAZ;AAAmBS,UAAAA,WAAW,EAAEF;AAAhC;AACD;;AAED;AAAS;AACP,eAAOP,KAAP;AACD;AAnCH;AAqCD,CAtCD;;AAwCA,eAAeD,eAAf","sourcesContent":["import uuid from 'uuid/v1';\nimport { ADD_ITEM } from '../actions/AddItem';\nimport { DELETE_ITEM } from '../actions/DeleteItem';\nimport { EDIT_ITEM } from '../actions/EditItem';\nimport { CHECK_DETAILED_ITEM } from '../actions/CheckDetailedItem';\n\nconst initState = {\n  items: [\n    {id: '1', value: \"LET'S GO RAPTORS!!!\"},\n    {id: '2', value: \"GSW SUCKS!!!\"},  \n  ],\n};\n\n// previousState + action => newState\nconst messagesReducer = (state = initState, action) => {\n  switch (action.type) {\n    \n    case ADD_ITEM: {\n      const id = uuid();\n      const messageItem = {\n        id,\n        value: action.payload.value,\n      };\n      return { ...state, items: [...state.items, messageItem] };\n    }\n\n    case DELETE_ITEM: {\n      const items = state.items.filter(({ id }) => id !== action.payload.id);\n      return { ...state, items };\n    }\n\n    case EDIT_ITEM: {\n      const items = state.items.map(item => {\n        if (item.id === action.payload.editedItem.id) {\n          item.value = action.payload.editedItem.value;\n        }\n\n        return item;\n      });\n\n      return { ...state, items, editingItem: {} };\n    }\n\n    case CHECK_DETAILED_ITEM: {\n      const item = state.items.find(({ id }) => id === action.payload.id);\n      return { ...state, editingItem: item };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default messagesReducer;\n"]},"metadata":{},"sourceType":"module"}